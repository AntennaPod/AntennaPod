apply plugin: "com.android.library"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testApplicationId "de.danoeh.antennapod.core.tests"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ eventBusIndex : 'de.danoeh.antennapod.core.ApCoreEventBusIndex' ]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    packagingOptions {
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "market"
    productFlavors {
        free {
            dimension "market"
        }
        play {
            dimension "market"
        }
    }

}

dependencies {
    implementation "com.android.support:support-v4:$supportVersion"
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:preference-v14:$supportVersion"
    implementation "android.arch.work:work-runtime:$workManagerVersion"
    
    implementation "org.apache.commons:commons-lang3:$commonslangVersion"
    implementation "org.apache.commons:commons-text:$commonstextVersion"
    implementation "commons-io:commons-io:$commonsioVersion"
    implementation "com.jayway.android.robotium:robotium-solo:$robotiumSoloVersion"
    implementation "org.jsoup:jsoup:$jsoupVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glideOkhttpIntegrationVersion@aar"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttpVersion"
    implementation "com.squareup.okio:okio:$okioVersion"
    implementation "org.greenrobot:eventbus:$eventbusVersion"
    annotationProcessor "org.greenrobot:eventbus-annotation-processor:$eventbusVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "org.awaitility:awaitility:$awaitilityVersion"

    implementation "com.google.android.exoplayer:exoplayer:$exoPlayerVersion"
    implementation "com.github.AntennaPod:AntennaPod-AudioPlayer:$audioPlayerVersion"

    // Add casting features
    // free build hack: skip some dependencies
    if (!doFreeBuild()) {
        playApi "com.google.android.libraries.cast.companionlibrary:ccl:$castCompanionLibVer"
        api "com.android.support:mediarouter-v7:$supportVersion"
        playApi "com.google.android.gms:play-services-cast:$playServicesVersion"
        api "com.google.android.support:wearable:$wearableSupportVersion"
    } else {
        System.out.println("core: free build hack, skipping some dependencies")
    }

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed"
        showStandardStreams true
        displayGranularity 2
    }
}
